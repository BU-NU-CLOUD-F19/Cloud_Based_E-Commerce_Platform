# TODO: the actual usernames/passwords shouldn't be stored in this file. We need
# a way to put those somewhere that's not in version control.
#
# Use docker-compose file version 3
version: "3"
services:
  # Database service
  postgres:
    # Image based on Alpine is smaller
    image: "postgres:12-alpine"
    container_name: "${POSTGRES_HOST}"
    env_file:
      - .env
    environment:
      # The password for the database, can be changed to whatever.
      # Default username is 'postgres', can be changed with POSTGRES_USER.
      # Another useful variable is POSTGRES_DB, the name of the database.
      # Ref: https://hub.docker.com/_/postgres
      POSTGRES_PASSWORD: northeastern

    # Forward ports, format 'container:host'
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}

    # Mount local directories on the container filesystem
    volumes:
      # A place to store postgres data
      - ./db/db-data:/var/lib/postgresql
      # Script to initialize a test database
      - ./db/test-db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped

  # Pgadmin service (web interface)
  pgadmin:
    image: "dpage/pgadmin4"

    # Can't have the web interface without a database
    depends_on:
      - postgres
    container_name: "${PGADMIN_HOST}"
    env_file:
      - .env
    environment:
      # Credentials used to sign in to the web interface
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - ./db/pgadmin:/var/lib/pgadmin
    ports:
      # Use the value of an environment variable if it's set. If not, use local
      # port 5050 for the web interface (port 80 in the container).
      - "${PGADMIN_PORT}:80"
    restart: unless-stopped

  inventory-management:
    build: ./inventory-management
    container_name: "${INVENTORY_HOST}"
    env_file:
      - .env
    # Forward ports, format 'container:host'
    ports:
      - ${INVENTORY_PORT}:${INVENTORY_PORT}
    # Mount local directories on the container filesystem.
    # Should not happen in production.
    volumes:
      - ./inventory-management/src:/usr/app/src
      - ./inventory-management/app.js:/usr/app/app.js
      - ./inventory-management/process.json:/usr/app/process.json
      - ./inventory-management/registrations.js:/usr/app/registrations.js
      - ./inventory-management/.inventory-managementrc:/usr/app/.inventory-managementrc
      - ./inventory-management/log:/usr/app/log
      - ./inventory-management/tests:/usr/app/tests
    restart: unless-stopped

  cart:
    build: ./cart
    container_name: "${CART_HOST}"
    env_file:
      - .env

    # Forward ports, format 'container:host'
    ports:
      - ${CART_PORT}:${CART_PORT}

    # Mount local directories on the container filesystem.
    # Should not happen in production.
    volumes:
      - ./cart/src:/usr/app/src
      - ./cart/app.js:/usr/app/app.js
      - ./cart/process.json:/usr/app/process.json
      - ./cart/registrations.js:/usr/app/registrations.js
      - ./cart/.cartrc:/usr/app/.cartrc
      - ./cart/log:/usr/app/log
      - ./cart/test:/usr/app/test
      # The above line takes care of making the log dir accessible, but should be
      #   handled differently in production.

    restart: unless-stopped

  api-gateway:
    build: ./graphql-api-gateway-poc
    container_name: "${API_GW_HOST}"
    env_file:
      - .env
    volumes:
      - ./graphql-api-gateway-poc/src:/usr/app/src
      - ./graphql-api-gateway-poc/process.json:/usr/app/process.json
      - ./graphql-api-gateway-poc/log:/usr/app/log
    depends_on:
      - ${INVENTORY_GQL_HOST}
      - ${CART_GQL_HOST}
    expose:
      - ${API_GW_PORT}
    ports:
      - ${API_GW_PORT}:${API_GW_PORT}
    environment:
      INVENTORY_GRAPHQL_SERVICE: ${INVENTORY_GQL_HOST}
      CART_GRAPHQL_SERVICE: ${CART_GQL_HOST}

  inventory-management-graphql-service:
    build: ./inventory-management/graphql-service
    container_name: "${INVENTORY_GQL_HOST}"
    env_file:
      - .env
    volumes:
      - ./inventory-management/graphql-service/index.js:/usr/app/index.js
      - ./inventory-management/graphql-service/datasource.js:/usr/app/datasource.js
      - ./inventory-management/graphql-service/process.json:/usr/app/process.json
      - ./inventory-management/graphql-service/src:/usr/app/src
      - ./inventory-management/graphql-service/log:/usr/app/log
    expose:
      - ${INVENTORY_GQL_PORT}
    ports:
      - ${INVENTORY_GQL_PORT}:${INVENTORY_GQL_PORT}
    environment:
      INVENTORY_SERVICE: inventory-management

  cart-graphql-service:
    build: ./cart/graphql-service
    container_name: "${CART_GQL_HOST}"
    env_file:
      - .env
    volumes:
      - ./cart/graphql-service/index.js:/usr/app/index.js
      - ./cart/graphql-service/datasource.js:/usr/app/datasource.js
      - ./cart/graphql-service/process.json:/usr/app/process.json
      - ./cart/graphql-service/src:/usr/app/src
      - ./cart/graphql-service/log:/usr/app/log
    expose:
      - ${CART_GQL_PORT}
    ports:
      - ${CART_GQL_PORT}:${CART_GQL_PORT}
    restart: unless-stopped
    environment:
      BOILERPLATE_SERVICE: boilerplate
      CART_SERVICE: cart

  authentication:
    build: ./authentication
    container_name: "auth-service"
    volumes:
      - ./authentication/src:/usr/app/src
      - ./authentication/app.js:/usr/app/app.js
      - ./authentication/process.json:/usr/app/process.json
      - ./authentication/registrations.js:/usr/app/registrations.js
      - ./authentication/.authenticationrc:/usr/app/.authenticationrc
      - ./authentication/log:/usr/app/log
      - ./authentication/auth.js:/usr/app/auth.js
      - ./authentication/serviceAccountKey.json:/usr/app/serviceAccountKey.json
      - ./authentication/firebase-config.json:/usr/app/firebase-config.json
      - ./authentication/firebase-client.js:/usr/app/firebase-client.js
    expose:
      - 4050
    ports:
      - 4050:4050
    restart: unless-stopped
